# Adapted from https://github.com/League-of-Foundry-Developers/FoundryVTT-Module-Template
# Modified for FoundryVTT System releases
name: Release Creation

on: 
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for release notes generation

    # Extract version from tag
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    # Generate release notes from commit messages
    - name: Generate Release Notes
      id: generate_notes
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_version.outputs.VERSION }}^ 2>/dev/null || echo "")
        
        # Generate release notes from commit messages
        if [ -n "$PREV_TAG" ]; then
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREV_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $PREV_TAG..${{ steps.get_version.outputs.VERSION }} >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Initial Release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" ${{ steps.get_version.outputs.VERSION }} >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    # Substitute the Manifest and Download Links For Versioned Ones
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: 'system.json'
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/system.json
        download: https://github.com/${{github.repository}}/releases/download/${{ steps.get_version.outputs.VERSION }}/system.zip

    # Create a zip file with all files required by the system to add to the release
    - name: Create System Archive
      run: zip -r ./system.zip . -x@.github/zip-exclude.lst

    # Create a release for this specific version
    - name: Create Version Release
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        makeLatest: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './system.json, ./system.zip'
        tag: ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.generate_notes.outputs.RELEASE_NOTES }}

    # Update the 'latest' release
    - name: Create Latest Release
      id: create_latest_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: Latest
        draft: false
        prerelease: false
        makeLatest: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './system.json,./system.zip'
        tag: latest
        body: ${{ steps.generate_notes.outputs.RELEASE_NOTES }} 